// Code generated by Stan version 2.17.1

#include <stan/model/model_header.hpp>

namespace stan_qLearning_4params_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "C:/Users/cooper_PC/Desktop/githubRepositories/cooperAnalysis/matlabCode/operantMatching/learningModels/stan/stan_qLearning_4params.stan");
    reader.add_event(138, 138, "end", "C:/Users/cooper_PC/Desktop/githubRepositories/cooperAnalysis/matlabCode/operantMatching/learningModels/stan/stan_qLearning_4params.stan");
    return reader;
}

class stan_qLearning_4params_model : public prob_grad {
private:
    int N;
    int T;
    vector<int> Tsesh;
    vector<vector<int> > choice;
    vector<vector<double> > outcome;
    vector_d initQ;
public:
    stan_qLearning_4params_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    stan_qLearning_4params_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "stan_qLearning_4params_model_namespace::stan_qLearning_4params_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];
            current_statement_begin__ = 4;
            validate_non_negative_index("Tsesh", "N", N);
            context__.validate_dims("data initialization", "Tsesh", "int", context__.to_vec(N));
            validate_non_negative_index("Tsesh", "N", N);
            Tsesh = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("Tsesh");
            pos__ = 0;
            size_t Tsesh_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < Tsesh_limit_0__; ++i_0__) {
                Tsesh[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 5;
            validate_non_negative_index("choice", "N", N);
            validate_non_negative_index("choice", "T", T);
            context__.validate_dims("data initialization", "choice", "int", context__.to_vec(N,T));
            validate_non_negative_index("choice", "N", N);
            validate_non_negative_index("choice", "T", T);
            choice = std::vector<std::vector<int> >(N,std::vector<int>(T,int(0)));
            vals_i__ = context__.vals_i("choice");
            pos__ = 0;
            size_t choice_limit_1__ = T;
            for (size_t i_1__ = 0; i_1__ < choice_limit_1__; ++i_1__) {
                size_t choice_limit_0__ = N;
                for (size_t i_0__ = 0; i_0__ < choice_limit_0__; ++i_0__) {
                    choice[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 6;
            validate_non_negative_index("outcome", "N", N);
            validate_non_negative_index("outcome", "T", T);
            context__.validate_dims("data initialization", "outcome", "double", context__.to_vec(N,T));
            validate_non_negative_index("outcome", "N", N);
            validate_non_negative_index("outcome", "T", T);
            outcome = std::vector<std::vector<double> >(N,std::vector<double>(T,double(0)));
            vals_r__ = context__.vals_r("outcome");
            pos__ = 0;
            size_t outcome_limit_1__ = T;
            for (size_t i_1__ = 0; i_1__ < outcome_limit_1__; ++i_1__) {
                size_t outcome_limit_0__ = N;
                for (size_t i_0__ = 0; i_0__ < outcome_limit_0__; ++i_0__) {
                    outcome[i_0__][i_1__] = vals_r__[pos__++];
                }
            }

            // validate, data variables
            current_statement_begin__ = 2;
            check_greater_or_equal(function__,"N",N,1);
            current_statement_begin__ = 3;
            check_greater_or_equal(function__,"T",T,1);
            current_statement_begin__ = 4;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                check_greater_or_equal(function__,"Tsesh[k0__]",Tsesh[k0__],1);
                check_less_or_equal(function__,"Tsesh[k0__]",Tsesh[k0__],T);
            }
            current_statement_begin__ = 5;
            for (int k0__ = 0; k0__ < N; ++k0__) {
                for (int k1__ = 0; k1__ < T; ++k1__) {
                    check_greater_or_equal(function__,"choice[k0__][k1__]",choice[k0__][k1__],-(1));
                    check_less_or_equal(function__,"choice[k0__][k1__]",choice[k0__][k1__],2);
                }
            }
            current_statement_begin__ = 6;
            // initialize data variables
            current_statement_begin__ = 9;
            validate_non_negative_index("initQ", "2", 2);
            initQ = vector_d(static_cast<Eigen::VectorXd::Index>(2));
            stan::math::fill(initQ,DUMMY_VAR__);

            current_statement_begin__ = 10;
            stan::math::assign(initQ, rep_vector(0.0,2));

            // validate transformed data
            current_statement_begin__ = 9;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 15;
            validate_non_negative_index("mu_p", "4", 4);
            num_params_r__ += 4;
            current_statement_begin__ = 16;
            validate_non_negative_index("sigma", "4", 4);
            num_params_r__ += 4;
            current_statement_begin__ = 19;
            validate_non_negative_index("aN_pr", "N", N);
            num_params_r__ += N;
            current_statement_begin__ = 20;
            validate_non_negative_index("aP_pr", "N", N);
            num_params_r__ += N;
            current_statement_begin__ = 21;
            validate_non_negative_index("aF_pr", "N", N);
            num_params_r__ += N;
            current_statement_begin__ = 22;
            validate_non_negative_index("beta_pr", "N", N);
            num_params_r__ += N;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~stan_qLearning_4params_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("mu_p")))
            throw std::runtime_error("variable mu_p missing");
        vals_r__ = context__.vals_r("mu_p");
        pos__ = 0U;
        validate_non_negative_index("mu_p", "4", 4);
        context__.validate_dims("initialization", "mu_p", "vector_d", context__.to_vec(4));
        vector_d mu_p(static_cast<Eigen::VectorXd::Index>(4));
        for (int j1__ = 0U; j1__ < 4; ++j1__)
            mu_p(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(mu_p);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu_p: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "4", 4);
        context__.validate_dims("initialization", "sigma", "vector_d", context__.to_vec(4));
        vector_d sigma(static_cast<Eigen::VectorXd::Index>(4));
        for (int j1__ = 0U; j1__ < 4; ++j1__)
            sigma(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        if (!(context__.contains_r("aN_pr")))
            throw std::runtime_error("variable aN_pr missing");
        vals_r__ = context__.vals_r("aN_pr");
        pos__ = 0U;
        validate_non_negative_index("aN_pr", "N", N);
        context__.validate_dims("initialization", "aN_pr", "vector_d", context__.to_vec(N));
        vector_d aN_pr(static_cast<Eigen::VectorXd::Index>(N));
        for (int j1__ = 0U; j1__ < N; ++j1__)
            aN_pr(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(aN_pr);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable aN_pr: ") + e.what());
        }

        if (!(context__.contains_r("aP_pr")))
            throw std::runtime_error("variable aP_pr missing");
        vals_r__ = context__.vals_r("aP_pr");
        pos__ = 0U;
        validate_non_negative_index("aP_pr", "N", N);
        context__.validate_dims("initialization", "aP_pr", "vector_d", context__.to_vec(N));
        vector_d aP_pr(static_cast<Eigen::VectorXd::Index>(N));
        for (int j1__ = 0U; j1__ < N; ++j1__)
            aP_pr(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(aP_pr);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable aP_pr: ") + e.what());
        }

        if (!(context__.contains_r("aF_pr")))
            throw std::runtime_error("variable aF_pr missing");
        vals_r__ = context__.vals_r("aF_pr");
        pos__ = 0U;
        validate_non_negative_index("aF_pr", "N", N);
        context__.validate_dims("initialization", "aF_pr", "vector_d", context__.to_vec(N));
        vector_d aF_pr(static_cast<Eigen::VectorXd::Index>(N));
        for (int j1__ = 0U; j1__ < N; ++j1__)
            aF_pr(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(aF_pr);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable aF_pr: ") + e.what());
        }

        if (!(context__.contains_r("beta_pr")))
            throw std::runtime_error("variable beta_pr missing");
        vals_r__ = context__.vals_r("beta_pr");
        pos__ = 0U;
        validate_non_negative_index("beta_pr", "N", N);
        context__.validate_dims("initialization", "beta_pr", "vector_d", context__.to_vec(N));
        vector_d beta_pr(static_cast<Eigen::VectorXd::Index>(N));
        for (int j1__ = 0U; j1__ < N; ++j1__)
            beta_pr(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(beta_pr);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta_pr: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  mu_p;
            (void) mu_p;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_p = in__.vector_constrain(4,lp__);
            else
                mu_p = in__.vector_constrain(4);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.vector_lb_constrain(0,4,lp__);
            else
                sigma = in__.vector_lb_constrain(0,4);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  aN_pr;
            (void) aN_pr;  // dummy to suppress unused var warning
            if (jacobian__)
                aN_pr = in__.vector_constrain(N,lp__);
            else
                aN_pr = in__.vector_constrain(N);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  aP_pr;
            (void) aP_pr;  // dummy to suppress unused var warning
            if (jacobian__)
                aP_pr = in__.vector_constrain(N,lp__);
            else
                aP_pr = in__.vector_constrain(N);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  aF_pr;
            (void) aF_pr;  // dummy to suppress unused var warning
            if (jacobian__)
                aF_pr = in__.vector_constrain(N,lp__);
            else
                aF_pr = in__.vector_constrain(N);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  beta_pr;
            (void) beta_pr;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_pr = in__.vector_constrain(N,lp__);
            else
                beta_pr = in__.vector_constrain(N);


            // transformed parameters
            current_statement_begin__ = 26;
            validate_non_negative_index("aN", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  aN(static_cast<Eigen::VectorXd::Index>(N));
            (void) aN;  // dummy to suppress unused var warning

            stan::math::initialize(aN, DUMMY_VAR__);
            stan::math::fill(aN,DUMMY_VAR__);
            current_statement_begin__ = 27;
            validate_non_negative_index("aP", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  aP(static_cast<Eigen::VectorXd::Index>(N));
            (void) aP;  // dummy to suppress unused var warning

            stan::math::initialize(aP, DUMMY_VAR__);
            stan::math::fill(aP,DUMMY_VAR__);
            current_statement_begin__ = 28;
            validate_non_negative_index("aF", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  aF(static_cast<Eigen::VectorXd::Index>(N));
            (void) aF;  // dummy to suppress unused var warning

            stan::math::initialize(aF, DUMMY_VAR__);
            stan::math::fill(aF,DUMMY_VAR__);
            current_statement_begin__ = 29;
            validate_non_negative_index("beta", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  beta(static_cast<Eigen::VectorXd::Index>(N));
            (void) beta;  // dummy to suppress unused var warning

            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta,DUMMY_VAR__);


            current_statement_begin__ = 31;
            for (int i = 1; i <= N; ++i) {

                current_statement_begin__ = 32;
                stan::math::assign(get_base1_lhs(aN,i,"aN",1), Phi_approx((get_base1(mu_p,1,"mu_p",1) + (get_base1(sigma,1,"sigma",1) * get_base1(aN_pr,i,"aN_pr",1)))));
                current_statement_begin__ = 33;
                stan::math::assign(get_base1_lhs(aP,i,"aP",1), Phi_approx((get_base1(mu_p,2,"mu_p",1) + (get_base1(sigma,2,"sigma",1) * get_base1(aP_pr,i,"aP_pr",1)))));
                current_statement_begin__ = 34;
                stan::math::assign(get_base1_lhs(aF,i,"aF",1), Phi_approx((get_base1(mu_p,3,"mu_p",1) + (get_base1(sigma,3,"sigma",1) * get_base1(aF_pr,i,"aF_pr",1)))));
                current_statement_begin__ = 35;
                stan::math::assign(get_base1_lhs(beta,i,"beta",1), Phi_approx((get_base1(mu_p,4,"mu_p",1) + (get_base1(sigma,4,"sigma",1) * get_base1(beta_pr,i,"beta_pr",1)))));
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < N; ++i0__) {
                if (stan::math::is_uninitialized(aN(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: aN" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < N; ++i0__) {
                if (stan::math::is_uninitialized(aP(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: aP" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < N; ++i0__) {
                if (stan::math::is_uninitialized(aF(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: aF" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < N; ++i0__) {
                if (stan::math::is_uninitialized(beta(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 26;
            check_greater_or_equal(function__,"aN",aN,0);
            check_less_or_equal(function__,"aN",aN,1);
            current_statement_begin__ = 27;
            check_greater_or_equal(function__,"aP",aP,0);
            check_less_or_equal(function__,"aP",aP,1);
            current_statement_begin__ = 28;
            check_greater_or_equal(function__,"aF",aF,0);
            check_less_or_equal(function__,"aF",aF,1);
            current_statement_begin__ = 29;
            check_greater_or_equal(function__,"beta",beta,0);
            check_less_or_equal(function__,"beta",beta,5);

            // model body

            current_statement_begin__ = 40;
            lp_accum__.add(normal_log<propto__>(mu_p, 0, 1));
            current_statement_begin__ = 41;
            lp_accum__.add(cauchy_log<propto__>(sigma, 0, 5));
            current_statement_begin__ = 44;
            lp_accum__.add(normal_log<propto__>(aN_pr, 0, 1));
            current_statement_begin__ = 45;
            lp_accum__.add(normal_log<propto__>(aP_pr, 0, 1));
            current_statement_begin__ = 46;
            lp_accum__.add(normal_log<propto__>(aF_pr, 0, 1));
            current_statement_begin__ = 47;
            lp_accum__.add(normal_log<propto__>(beta_pr, 0, 10));
            current_statement_begin__ = 50;
            for (int i = 1; i <= N; ++i) {
                {
                current_statement_begin__ = 51;
                validate_non_negative_index("Q", "2", 2);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  Q(static_cast<Eigen::VectorXd::Index>(2));
                (void) Q;  // dummy to suppress unused var warning

                stan::math::initialize(Q, DUMMY_VAR__);
                stan::math::fill(Q,DUMMY_VAR__);
                current_statement_begin__ = 52;
                local_scalar_t__ PE;
                (void) PE;  // dummy to suppress unused var warning

                stan::math::initialize(PE, DUMMY_VAR__);
                stan::math::fill(PE,DUMMY_VAR__);


                current_statement_begin__ = 54;
                stan::math::assign(Q, initQ);
                current_statement_begin__ = 56;
                for (int t = 1; t <= get_base1(Tsesh,i,"Tsesh",1); ++t) {

                    current_statement_begin__ = 58;
                    lp_accum__.add(categorical_logit_log<propto__>(get_base1(get_base1(choice,i,"choice",1),t,"choice",2), multiply(get_base1(beta,i,"beta",1),Q)));
                    current_statement_begin__ = 61;
                    stan::math::assign(PE, (get_base1(get_base1(outcome,i,"outcome",1),t,"outcome",2) - get_base1(Q,get_base1(get_base1(choice,i,"choice",1),t,"choice",2),"Q",1)));
                    current_statement_begin__ = 64;
                    if (as_bool(logical_lt(PE,0))) {

                        current_statement_begin__ = 65;
                        stan::math::assign(get_base1_lhs(Q,get_base1(get_base1(choice,i,"choice",1),t,"choice",2),"Q",1), (get_base1(Q,get_base1(get_base1(choice,i,"choice",1),t,"choice",2),"Q",1) + (get_base1(aN,i,"aN",1) * PE)));
                    } else {

                        current_statement_begin__ = 68;
                        stan::math::assign(get_base1_lhs(Q,get_base1(get_base1(choice,i,"choice",1),t,"choice",2),"Q",1), (get_base1(Q,get_base1(get_base1(choice,i,"choice",1),t,"choice",2),"Q",1) + (get_base1(aP,i,"aP",1) * PE)));
                    }
                    current_statement_begin__ = 70;
                    if (as_bool(logical_eq(get_base1(get_base1(choice,i,"choice",1),t,"choice",2),1))) {

                        current_statement_begin__ = 71;
                        stan::math::assign(get_base1_lhs(Q,2,"Q",1), (get_base1(Q,2,"Q",1) * get_base1(aF,i,"aF",1)));
                    } else {

                        current_statement_begin__ = 73;
                        stan::math::assign(get_base1_lhs(Q,1,"Q",1), (get_base1(Q,1,"Q",1) * get_base1(aF,i,"aF",1)));
                    }
                }
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mu_p");
        names__.push_back("sigma");
        names__.push_back("aN_pr");
        names__.push_back("aP_pr");
        names__.push_back("aF_pr");
        names__.push_back("beta_pr");
        names__.push_back("aN");
        names__.push_back("aP");
        names__.push_back("aF");
        names__.push_back("beta");
        names__.push_back("mu_aN");
        names__.push_back("mu_aP");
        names__.push_back("mu_aF");
        names__.push_back("mu_beta");
        names__.push_back("log_lik");
        names__.push_back("y_pred");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(4);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(4);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(T);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "stan_qLearning_4params_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector_d mu_p = in__.vector_constrain(4);
        vector_d sigma = in__.vector_lb_constrain(0,4);
        vector_d aN_pr = in__.vector_constrain(N);
        vector_d aP_pr = in__.vector_constrain(N);
        vector_d aF_pr = in__.vector_constrain(N);
        vector_d beta_pr = in__.vector_constrain(N);
            for (int k_0__ = 0; k_0__ < 4; ++k_0__) {
            vars__.push_back(mu_p[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < 4; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(aN_pr[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(aP_pr[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(aF_pr[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(beta_pr[k_0__]);
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 26;
            validate_non_negative_index("aN", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  aN(static_cast<Eigen::VectorXd::Index>(N));
            (void) aN;  // dummy to suppress unused var warning

            stan::math::initialize(aN, DUMMY_VAR__);
            stan::math::fill(aN,DUMMY_VAR__);
            current_statement_begin__ = 27;
            validate_non_negative_index("aP", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  aP(static_cast<Eigen::VectorXd::Index>(N));
            (void) aP;  // dummy to suppress unused var warning

            stan::math::initialize(aP, DUMMY_VAR__);
            stan::math::fill(aP,DUMMY_VAR__);
            current_statement_begin__ = 28;
            validate_non_negative_index("aF", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  aF(static_cast<Eigen::VectorXd::Index>(N));
            (void) aF;  // dummy to suppress unused var warning

            stan::math::initialize(aF, DUMMY_VAR__);
            stan::math::fill(aF,DUMMY_VAR__);
            current_statement_begin__ = 29;
            validate_non_negative_index("beta", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  beta(static_cast<Eigen::VectorXd::Index>(N));
            (void) beta;  // dummy to suppress unused var warning

            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta,DUMMY_VAR__);


            current_statement_begin__ = 31;
            for (int i = 1; i <= N; ++i) {

                current_statement_begin__ = 32;
                stan::math::assign(get_base1_lhs(aN,i,"aN",1), Phi_approx((get_base1(mu_p,1,"mu_p",1) + (get_base1(sigma,1,"sigma",1) * get_base1(aN_pr,i,"aN_pr",1)))));
                current_statement_begin__ = 33;
                stan::math::assign(get_base1_lhs(aP,i,"aP",1), Phi_approx((get_base1(mu_p,2,"mu_p",1) + (get_base1(sigma,2,"sigma",1) * get_base1(aP_pr,i,"aP_pr",1)))));
                current_statement_begin__ = 34;
                stan::math::assign(get_base1_lhs(aF,i,"aF",1), Phi_approx((get_base1(mu_p,3,"mu_p",1) + (get_base1(sigma,3,"sigma",1) * get_base1(aF_pr,i,"aF_pr",1)))));
                current_statement_begin__ = 35;
                stan::math::assign(get_base1_lhs(beta,i,"beta",1), Phi_approx((get_base1(mu_p,4,"mu_p",1) + (get_base1(sigma,4,"sigma",1) * get_base1(beta_pr,i,"beta_pr",1)))));
            }

            // validate transformed parameters
            current_statement_begin__ = 26;
            check_greater_or_equal(function__,"aN",aN,0);
            check_less_or_equal(function__,"aN",aN,1);
            current_statement_begin__ = 27;
            check_greater_or_equal(function__,"aP",aP,0);
            check_less_or_equal(function__,"aP",aP,1);
            current_statement_begin__ = 28;
            check_greater_or_equal(function__,"aF",aF,0);
            check_less_or_equal(function__,"aF",aF,1);
            current_statement_begin__ = 29;
            check_greater_or_equal(function__,"beta",beta,0);
            check_less_or_equal(function__,"beta",beta,5);

            // write transformed parameters
            if (include_tparams__) {
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(aN[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(aP[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(aF[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(beta[k_0__]);
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 80;
            local_scalar_t__ mu_aN;
            (void) mu_aN;  // dummy to suppress unused var warning

            stan::math::initialize(mu_aN, DUMMY_VAR__);
            stan::math::fill(mu_aN,DUMMY_VAR__);
            current_statement_begin__ = 81;
            local_scalar_t__ mu_aP;
            (void) mu_aP;  // dummy to suppress unused var warning

            stan::math::initialize(mu_aP, DUMMY_VAR__);
            stan::math::fill(mu_aP,DUMMY_VAR__);
            current_statement_begin__ = 82;
            local_scalar_t__ mu_aF;
            (void) mu_aF;  // dummy to suppress unused var warning

            stan::math::initialize(mu_aF, DUMMY_VAR__);
            stan::math::fill(mu_aF,DUMMY_VAR__);
            current_statement_begin__ = 83;
            local_scalar_t__ mu_beta;
            (void) mu_beta;  // dummy to suppress unused var warning

            stan::math::initialize(mu_beta, DUMMY_VAR__);
            stan::math::fill(mu_beta,DUMMY_VAR__);
            current_statement_begin__ = 86;
            validate_non_negative_index("log_lik", "N", N);
            vector<local_scalar_t__> log_lik(N);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik,DUMMY_VAR__);
            current_statement_begin__ = 89;
            validate_non_negative_index("y_pred", "N", N);
            validate_non_negative_index("y_pred", "T", T);
            vector<vector<local_scalar_t__> > y_pred(N, (vector<local_scalar_t__>(T)));
            stan::math::initialize(y_pred, DUMMY_VAR__);
            stan::math::fill(y_pred,DUMMY_VAR__);


            current_statement_begin__ = 92;
            for (int i = 1; i <= N; ++i) {

                current_statement_begin__ = 93;
                for (int t = 1; t <= T; ++t) {

                    current_statement_begin__ = 94;
                    stan::math::assign(get_base1_lhs(get_base1_lhs(y_pred,i,"y_pred",1),t,"y_pred",2), -(1));
                }
            }
            current_statement_begin__ = 98;
            stan::math::assign(mu_aN, Phi_approx(get_base1(mu_p,1,"mu_p",1)));
            current_statement_begin__ = 99;
            stan::math::assign(mu_aP, Phi_approx(get_base1(mu_p,2,"mu_p",1)));
            current_statement_begin__ = 100;
            stan::math::assign(mu_aF, Phi_approx(get_base1(mu_p,3,"mu_p",1)));
            current_statement_begin__ = 101;
            stan::math::assign(mu_beta, (Phi_approx(get_base1(mu_p,4,"mu_p",1)) * 5));

            current_statement_begin__ = 104;
            for (int i = 1; i <= N; ++i) {
                {
                current_statement_begin__ = 105;
                validate_non_negative_index("Q", "2", 2);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  Q(static_cast<Eigen::VectorXd::Index>(2));
                (void) Q;  // dummy to suppress unused var warning

                stan::math::initialize(Q, DUMMY_VAR__);
                stan::math::fill(Q,DUMMY_VAR__);
                current_statement_begin__ = 106;
                local_scalar_t__ PE;
                (void) PE;  // dummy to suppress unused var warning

                stan::math::initialize(PE, DUMMY_VAR__);
                stan::math::fill(PE,DUMMY_VAR__);


                current_statement_begin__ = 109;
                stan::math::assign(Q, initQ);
                current_statement_begin__ = 111;
                stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), 0);
                current_statement_begin__ = 113;
                for (int t = 1; t <= get_base1(Tsesh,i,"Tsesh",1); ++t) {

                    current_statement_begin__ = 115;
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), (get_base1(log_lik,i,"log_lik",1) + categorical_logit_log(get_base1(get_base1(choice,i,"choice",1),t,"choice",2),multiply(get_base1(beta,i,"beta",1),Q))));
                    current_statement_begin__ = 118;
                    stan::math::assign(get_base1_lhs(get_base1_lhs(y_pred,i,"y_pred",1),t,"y_pred",2), categorical_rng(softmax(multiply(get_base1(beta,i,"beta",1),Q)), base_rng__));
                    current_statement_begin__ = 121;
                    stan::math::assign(PE, (get_base1(get_base1(outcome,i,"outcome",1),t,"outcome",2) - get_base1(Q,get_base1(get_base1(choice,i,"choice",1),t,"choice",2),"Q",1)));
                    current_statement_begin__ = 124;
                    if (as_bool(logical_lt(PE,0))) {

                        current_statement_begin__ = 125;
                        stan::math::assign(get_base1_lhs(Q,get_base1(get_base1(choice,i,"choice",1),t,"choice",2),"Q",1), (get_base1(Q,get_base1(get_base1(choice,i,"choice",1),t,"choice",2),"Q",1) + (get_base1(aN,i,"aN",1) * PE)));
                    } else {

                        current_statement_begin__ = 128;
                        stan::math::assign(get_base1_lhs(Q,get_base1(get_base1(choice,i,"choice",1),t,"choice",2),"Q",1), (get_base1(Q,get_base1(get_base1(choice,i,"choice",1),t,"choice",2),"Q",1) + (get_base1(aP,i,"aP",1) * PE)));
                    }
                    current_statement_begin__ = 130;
                    if (as_bool(logical_eq(get_base1(get_base1(choice,i,"choice",1),t,"choice",2),1))) {

                        current_statement_begin__ = 131;
                        stan::math::assign(get_base1_lhs(Q,2,"Q",1), (get_base1(Q,2,"Q",1) * get_base1(aF,i,"aF",1)));
                    } else {

                        current_statement_begin__ = 133;
                        stan::math::assign(get_base1_lhs(Q,1,"Q",1), (get_base1(Q,1,"Q",1) * get_base1(aF,i,"aF",1)));
                    }
                }
                }
            }

            // validate generated quantities
            current_statement_begin__ = 80;
            check_greater_or_equal(function__,"mu_aN",mu_aN,0);
            check_less_or_equal(function__,"mu_aN",mu_aN,1);
            current_statement_begin__ = 81;
            check_greater_or_equal(function__,"mu_aP",mu_aP,0);
            check_less_or_equal(function__,"mu_aP",mu_aP,1);
            current_statement_begin__ = 82;
            check_greater_or_equal(function__,"mu_aF",mu_aF,0);
            check_less_or_equal(function__,"mu_aF",mu_aF,1);
            current_statement_begin__ = 83;
            check_greater_or_equal(function__,"mu_beta",mu_beta,0);
            check_less_or_equal(function__,"mu_beta",mu_beta,5);
            current_statement_begin__ = 86;
            current_statement_begin__ = 89;

            // write generated quantities
        vars__.push_back(mu_aN);
        vars__.push_back(mu_aP);
        vars__.push_back(mu_aF);
        vars__.push_back(mu_beta);
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < T; ++k_1__) {
                for (int k_0__ = 0; k_0__ < N; ++k_0__) {
                vars__.push_back(y_pred[k_0__][k_1__]);
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "stan_qLearning_4params_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= 4; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_p" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 4; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aN_pr" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aP_pr" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aF_pr" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_pr" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "aN" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "aP" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "aF" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_aN";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_aP";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_aF";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_beta";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= T; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_pred" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= 4; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_p" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 4; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aN_pr" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aP_pr" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aF_pr" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_pr" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "aN" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "aP" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "aF" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_aN";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_aP";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_aF";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_beta";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= T; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_pred" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }

}; // model

}

typedef stan_qLearning_4params_model_namespace::stan_qLearning_4params_model stan_model;

