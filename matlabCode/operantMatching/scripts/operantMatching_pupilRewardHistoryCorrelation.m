function [t_rwd, t_choice, t_rwdXchoice, coef_rwd] = operantMatching_pupilRewardHistoryCorrelation()
load('Z:\BB038\mBB038d20160813\sorted\mBB038d20160813_sessionData.mat')
t_rwd = [];
coef_rwd = {};
t_choice = [];
t_rwdXchoice = [];

for j = 1:length(sessionData)-100
    if mod(j,100) == 0
        sprintf('j = %d',j)
    end
    tempSessionData = sessionData(j:j+100);
    
    responseInds = find(~isnan([tempSessionData.rewardTime]));
    omitInds = isnan([tempSessionData.rewardTime]);

%     tempBlockSwitch = blockSwitch;
%     for j = 2:length(blockSwitch)
%         subVal = sum(omitInds(tempBlockSwitch(j-1):tempBlockSwitch(j)));
%         blockSwitch(j:end) = blockSwitch(j:end) - subVal;
%     end

    allReward_R = [tempSessionData(responseInds).rewardR]; 
    allReward_L = [tempSessionData(responseInds).rewardL]; 
    allChoices = NaN(1,length(tempSessionData(responseInds)));
    allChoices(~isnan(allReward_R)) = 1;
    allChoices(~isnan(allReward_L)) = -1;

    allReward_R(isnan(allReward_R)) = 0;
    allReward_L(isnan(allReward_L)) = 0;
    allChoice_R = double(allChoices == 1);
    allChoice_L = double(allChoices == -1);

    allRewards = zeros(1,length(allChoices));
    allRewards(logical(allReward_R)) = 1;
    allRewards(logical(allReward_L)) = -1;

    tMax = 10;
    rwdMatx = [];
    for i = 1:tMax
        rwdMatx(i,:) = [NaN(1,i) allRewards(1:end-i)];
    end

    choiceMatx = [];
    for i = 1:tMax
        choiceMatx(i,:) = [NaN(1,i) allChoices(1:end-i)];
    end
    lm_rwd = fitlm([rwdMatx]', allChoices,'linear');
    lm_choice = fitlm([choiceMatx]', allChoices, 'linear');
    lm_rwdXchoice = fitlm([rwdMatx; choiceMatx]', allChoices, 'linear');

%     if mod(j,50) == 0
%         fit_rwd = createFit(lm_rwd.Coefficients.Estimate(2:end),true);
%         pause
%         close all
%     else
        fit_rwd = createFit(lm_rwd.Coefficients.Estimate(2:end));
%     end
    t_rwd = [t_rwd 1/fit_rwd.b];
    coef_rwd = [coef_rwd {lm_rwd.Coefficients.Estimate(2:4)}];
    
    fit_choice = createFit(lm_choice.Coefficients.Estimate(2:end));
    t_choice = [t_choice 1/fit_choice.b];
    
    fit_rwdXchoice = createFit(lm_rwdXchoice.Coefficients.Estimate(2:end));
    t_rwdXchoice = [t_rwdXchoice 1/fit_rwdXchoice.b];
%     if 1/fit_rwd.b < 1.5
%         sprintf('pause line')
%     end
end

function [fitresult, gof] = createFit(pointsToFit, createPlot)
if nargin < 2
    createPlot = false;
end
%CREATEFIT(ANS)
%  Create a fit.
%
%  Data for 'untitled fit 1' fit:
%      Y Output: ans
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 10-Sep-2016 13:59:54


%% Fit: 'untitled fit 1'.
[xData, yData] = prepareCurveData( [], pointsToFit);

% Set up fittype and options.
ft = fittype( 'a*exp(-b*(x))', 'independent', 'x', 'dependent', 'y' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Display = 'Off';
opts.StartPoint = [0.828705142963829 0.981923383501417];

% Fit model to data.
[fitresult, gof] = fit( xData, yData, ft, opts );

% Plot fit with data.
if createPlot == true
    figure( 'Name', 'untitled fit 1' );
    h = plot( fitresult, xData, yData );
    legend( h, 'ans', 'untitled fit 1', 'Location', 'NorthEast' );
    % Label axes
    ylabel ans
    grid on
end
